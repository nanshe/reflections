When would you want to create a remote repository rather than keeping all your work local?

When you want to commit a change and have it backed up on the server and/or you want the commit 
accessible to other developers


Why might you want to always pull changes manually rather than having Git automatically
stay up-to-date with your remote repository?

You may not want the changes from the remote if it contains changes from another developer.


Describe the differences between forks, clones, and branches. 
When would you use one instead of another?

Branches are to create a new branch of commits within the same repository.
Clones are for creating a copy of a github or local repository with no link back 
to the original.
Forks are for creating a copy of a github repository on github when you want
a separate copy that links or gives credit to the original. This is useful 
when you want to make changes to a github repository but you don't have 
permissions as a collaborator to make changes to the original. After forking
a copy to your github profile, clone the repository to your computer. This 
creates a remote link to your github repository automatically. Make changes,
commit, and push the changes to your forked repository on github.  


What is the benefit of having a copy of the last known state of the remote stored
locally?

It allows you to compare your changes to that copy using git status and git diff which only 
work locally. Manually checking the differences allows you to see if their changes 
affect your changes before merging, even if they wouldn't create a merge conflict. 


How would you collaborate without using Git or GitHub?
What would be easier and what would be harder?

Without version control like Git and Github, collaborators would have to pass their latest
version of the file around to all collaborators by email. Then each collaborator would have
to manually merge the changes into their copy. 
Not much would be easier for a collaborator who knows how to use Git and GitHub - learning
it is the hard part.
Without a version control system, it's so much harder keeping a history of all the changes
and merging all the changes from all collaborators. With all the manual work involved for
all collaborators, there's bound to be errors and changes wiped out. 


When would you want to make changes in a separate branch rather than directly in master?
What benefits does each approach have?

You'd make them in a separate branch when you want a collaborator to review your changes
before merging them into master, where they could break the working code. 
It's certainly easier to just use master - there are far fewer steps to work directly on
master than to create a separate branch, but it's good to have code reviewed before it is
committed to the working branch. 